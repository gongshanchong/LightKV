// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvserver_2eproto;
namespace kv {
class DelKVResponse;
struct DelKVResponseDefaultTypeInternal;
extern DelKVResponseDefaultTypeInternal _DelKVResponse_default_instance_;
class GetKResponse;
struct GetKResponseDefaultTypeInternal;
extern GetKResponseDefaultTypeInternal _GetKResponse_default_instance_;
class GetKeyNameResponse;
struct GetKeyNameResponseDefaultTypeInternal;
extern GetKeyNameResponseDefaultTypeInternal _GetKeyNameResponse_default_instance_;
class ReqExpire;
struct ReqExpireDefaultTypeInternal;
extern ReqExpireDefaultTypeInternal _ReqExpire_default_instance_;
class ReqK;
struct ReqKDefaultTypeInternal;
extern ReqKDefaultTypeInternal _ReqK_default_instance_;
class ReqKV;
struct ReqKVDefaultTypeInternal;
extern ReqKVDefaultTypeInternal _ReqKV_default_instance_;
class ReqKeyName;
struct ReqKeyNameDefaultTypeInternal;
extern ReqKeyNameDefaultTypeInternal _ReqKeyName_default_instance_;
class SetExpireResponse;
struct SetExpireResponseDefaultTypeInternal;
extern SetExpireResponseDefaultTypeInternal _SetExpireResponse_default_instance_;
class SetKVResponse;
struct SetKVResponseDefaultTypeInternal;
extern SetKVResponseDefaultTypeInternal _SetKVResponse_default_instance_;
class StreamSetKVResponse;
struct StreamSetKVResponseDefaultTypeInternal;
extern StreamSetKVResponseDefaultTypeInternal _StreamSetKVResponse_default_instance_;
class StreamtreamReqKV;
struct StreamtreamReqKVDefaultTypeInternal;
extern StreamtreamReqKVDefaultTypeInternal _StreamtreamReqKV_default_instance_;
}  // namespace kv
PROTOBUF_NAMESPACE_OPEN
template<> ::kv::DelKVResponse* Arena::CreateMaybeMessage<::kv::DelKVResponse>(Arena*);
template<> ::kv::GetKResponse* Arena::CreateMaybeMessage<::kv::GetKResponse>(Arena*);
template<> ::kv::GetKeyNameResponse* Arena::CreateMaybeMessage<::kv::GetKeyNameResponse>(Arena*);
template<> ::kv::ReqExpire* Arena::CreateMaybeMessage<::kv::ReqExpire>(Arena*);
template<> ::kv::ReqK* Arena::CreateMaybeMessage<::kv::ReqK>(Arena*);
template<> ::kv::ReqKV* Arena::CreateMaybeMessage<::kv::ReqKV>(Arena*);
template<> ::kv::ReqKeyName* Arena::CreateMaybeMessage<::kv::ReqKeyName>(Arena*);
template<> ::kv::SetExpireResponse* Arena::CreateMaybeMessage<::kv::SetExpireResponse>(Arena*);
template<> ::kv::SetKVResponse* Arena::CreateMaybeMessage<::kv::SetKVResponse>(Arena*);
template<> ::kv::StreamSetKVResponse* Arena::CreateMaybeMessage<::kv::StreamSetKVResponse>(Arena*);
template<> ::kv::StreamtreamReqKV* Arena::CreateMaybeMessage<::kv::StreamtreamReqKV>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kv {

// ===================================================================

class GetKeyNameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.GetKeyNameResponse) */ {
 public:
  inline GetKeyNameResponse() : GetKeyNameResponse(nullptr) {}
  ~GetKeyNameResponse() override;
  explicit PROTOBUF_CONSTEXPR GetKeyNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKeyNameResponse(const GetKeyNameResponse& from);
  GetKeyNameResponse(GetKeyNameResponse&& from) noexcept
    : GetKeyNameResponse() {
    *this = ::std::move(from);
  }

  inline GetKeyNameResponse& operator=(const GetKeyNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyNameResponse& operator=(GetKeyNameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKeyNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKeyNameResponse* internal_default_instance() {
    return reinterpret_cast<const GetKeyNameResponse*>(
               &_GetKeyNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetKeyNameResponse& a, GetKeyNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyNameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKeyNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKeyNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKeyNameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKeyNameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKeyNameResponse& from) {
    GetKeyNameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyNameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.GetKeyNameResponse";
  }
  protected:
  explicit GetKeyNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated string val = 1;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  const std::string& val(int index) const;
  std::string* mutable_val(int index);
  void set_val(int index, const std::string& value);
  void set_val(int index, std::string&& value);
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  std::string* add_val();
  void add_val(const std::string& value);
  void add_val(std::string&& value);
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_val();
  private:
  const std::string& _internal_val(int index) const;
  std::string* _internal_add_val();
  public:

  // @@protoc_insertion_point(class_scope:kv.GetKeyNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class ReqKeyName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqKeyName) */ {
 public:
  inline ReqKeyName() : ReqKeyName(nullptr) {}
  ~ReqKeyName() override;
  explicit PROTOBUF_CONSTEXPR ReqKeyName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqKeyName(const ReqKeyName& from);
  ReqKeyName(ReqKeyName&& from) noexcept
    : ReqKeyName() {
    *this = ::std::move(from);
  }

  inline ReqKeyName& operator=(const ReqKeyName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqKeyName& operator=(ReqKeyName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqKeyName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqKeyName* internal_default_instance() {
    return reinterpret_cast<const ReqKeyName*>(
               &_ReqKeyName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqKeyName& a, ReqKeyName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqKeyName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqKeyName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqKeyName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqKeyName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqKeyName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqKeyName& from) {
    ReqKeyName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqKeyName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqKeyName";
  }
  protected:
  explicit ReqKeyName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyRexFieldNumber = 1,
  };
  // string keyRex = 1;
  void clear_keyrex();
  const std::string& keyrex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyrex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyrex();
  PROTOBUF_NODISCARD std::string* release_keyrex();
  void set_allocated_keyrex(std::string* keyrex);
  private:
  const std::string& _internal_keyrex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyrex(const std::string& value);
  std::string* _internal_mutable_keyrex();
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqKeyName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyrex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class SetExpireResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.SetExpireResponse) */ {
 public:
  inline SetExpireResponse() : SetExpireResponse(nullptr) {}
  ~SetExpireResponse() override;
  explicit PROTOBUF_CONSTEXPR SetExpireResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetExpireResponse(const SetExpireResponse& from);
  SetExpireResponse(SetExpireResponse&& from) noexcept
    : SetExpireResponse() {
    *this = ::std::move(from);
  }

  inline SetExpireResponse& operator=(const SetExpireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetExpireResponse& operator=(SetExpireResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetExpireResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetExpireResponse* internal_default_instance() {
    return reinterpret_cast<const SetExpireResponse*>(
               &_SetExpireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetExpireResponse& a, SetExpireResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetExpireResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetExpireResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetExpireResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetExpireResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetExpireResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetExpireResponse& from) {
    SetExpireResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetExpireResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.SetExpireResponse";
  }
  protected:
  explicit SetExpireResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.SetExpireResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class ReqExpire final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqExpire) */ {
 public:
  inline ReqExpire() : ReqExpire(nullptr) {}
  ~ReqExpire() override;
  explicit PROTOBUF_CONSTEXPR ReqExpire(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqExpire(const ReqExpire& from);
  ReqExpire(ReqExpire&& from) noexcept
    : ReqExpire() {
    *this = ::std::move(from);
  }

  inline ReqExpire& operator=(const ReqExpire& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqExpire& operator=(ReqExpire&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqExpire& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqExpire* internal_default_instance() {
    return reinterpret_cast<const ReqExpire*>(
               &_ReqExpire_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqExpire& a, ReqExpire& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqExpire* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqExpire* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqExpire* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqExpire>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqExpire& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqExpire& from) {
    ReqExpire::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqExpire* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqExpire";
  }
  protected:
  explicit ReqExpire(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kExpiresFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 expires = 2;
  void clear_expires();
  uint64_t expires() const;
  void set_expires(uint64_t value);
  private:
  uint64_t _internal_expires() const;
  void _internal_set_expires(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqExpire)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint64_t expires_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class ReqKV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqKV) */ {
 public:
  inline ReqKV() : ReqKV(nullptr) {}
  ~ReqKV() override;
  explicit PROTOBUF_CONSTEXPR ReqKV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqKV(const ReqKV& from);
  ReqKV(ReqKV&& from) noexcept
    : ReqKV() {
    *this = ::std::move(from);
  }

  inline ReqKV& operator=(const ReqKV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqKV& operator=(ReqKV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqKV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqKV* internal_default_instance() {
    return reinterpret_cast<const ReqKV*>(
               &_ReqKV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqKV& a, ReqKV& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqKV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqKV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqKV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqKV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqKV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqKV& from) {
    ReqKV::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqKV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqKV";
  }
  protected:
  explicit ReqKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValFieldNumber = 3,
    kEncodingFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string val = 3;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 encoding = 1;
  void clear_encoding();
  uint32_t encoding() const;
  void set_encoding(uint32_t value);
  private:
  uint32_t _internal_encoding() const;
  void _internal_set_encoding(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqKV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    uint32_t encoding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class SetKVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.SetKVResponse) */ {
 public:
  inline SetKVResponse() : SetKVResponse(nullptr) {}
  ~SetKVResponse() override;
  explicit PROTOBUF_CONSTEXPR SetKVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetKVResponse(const SetKVResponse& from);
  SetKVResponse(SetKVResponse&& from) noexcept
    : SetKVResponse() {
    *this = ::std::move(from);
  }

  inline SetKVResponse& operator=(const SetKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetKVResponse& operator=(SetKVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetKVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetKVResponse* internal_default_instance() {
    return reinterpret_cast<const SetKVResponse*>(
               &_SetKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetKVResponse& a, SetKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetKVResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetKVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetKVResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetKVResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetKVResponse& from) {
    SetKVResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetKVResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.SetKVResponse";
  }
  protected:
  explicit SetKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.SetKVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class DelKVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.DelKVResponse) */ {
 public:
  inline DelKVResponse() : DelKVResponse(nullptr) {}
  ~DelKVResponse() override;
  explicit PROTOBUF_CONSTEXPR DelKVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelKVResponse(const DelKVResponse& from);
  DelKVResponse(DelKVResponse&& from) noexcept
    : DelKVResponse() {
    *this = ::std::move(from);
  }

  inline DelKVResponse& operator=(const DelKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelKVResponse& operator=(DelKVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelKVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelKVResponse* internal_default_instance() {
    return reinterpret_cast<const DelKVResponse*>(
               &_DelKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DelKVResponse& a, DelKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelKVResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelKVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelKVResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelKVResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelKVResponse& from) {
    DelKVResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelKVResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.DelKVResponse";
  }
  protected:
  explicit DelKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.DelKVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class ReqK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqK) */ {
 public:
  inline ReqK() : ReqK(nullptr) {}
  ~ReqK() override;
  explicit PROTOBUF_CONSTEXPR ReqK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqK(const ReqK& from);
  ReqK(ReqK&& from) noexcept
    : ReqK() {
    *this = ::std::move(from);
  }

  inline ReqK& operator=(const ReqK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqK& operator=(ReqK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqK& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqK* internal_default_instance() {
    return reinterpret_cast<const ReqK*>(
               &_ReqK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqK& a, ReqK& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqK& from) {
    ReqK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqK";
  }
  protected:
  explicit ReqK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class GetKResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.GetKResponse) */ {
 public:
  inline GetKResponse() : GetKResponse(nullptr) {}
  ~GetKResponse() override;
  explicit PROTOBUF_CONSTEXPR GetKResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKResponse(const GetKResponse& from);
  GetKResponse(GetKResponse&& from) noexcept
    : GetKResponse() {
    *this = ::std::move(from);
  }

  inline GetKResponse& operator=(const GetKResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKResponse& operator=(GetKResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKResponse* internal_default_instance() {
    return reinterpret_cast<const GetKResponse*>(
               &_GetKResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetKResponse& a, GetKResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKResponse& from) {
    GetKResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.GetKResponse";
  }
  protected:
  explicit GetKResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // repeated string val = 2;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  const std::string& val(int index) const;
  std::string* mutable_val(int index);
  void set_val(int index, const std::string& value);
  void set_val(int index, std::string&& value);
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  std::string* add_val();
  void add_val(const std::string& value);
  void add_val(std::string&& value);
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_val();
  private:
  const std::string& _internal_val(int index) const;
  std::string* _internal_add_val();
  public:

  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.GetKResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> val_;
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class StreamtreamReqKV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.StreamtreamReqKV) */ {
 public:
  inline StreamtreamReqKV() : StreamtreamReqKV(nullptr) {}
  ~StreamtreamReqKV() override;
  explicit PROTOBUF_CONSTEXPR StreamtreamReqKV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamtreamReqKV(const StreamtreamReqKV& from);
  StreamtreamReqKV(StreamtreamReqKV&& from) noexcept
    : StreamtreamReqKV() {
    *this = ::std::move(from);
  }

  inline StreamtreamReqKV& operator=(const StreamtreamReqKV& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamtreamReqKV& operator=(StreamtreamReqKV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamtreamReqKV& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamtreamReqKV* internal_default_instance() {
    return reinterpret_cast<const StreamtreamReqKV*>(
               &_StreamtreamReqKV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamtreamReqKV& a, StreamtreamReqKV& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamtreamReqKV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamtreamReqKV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamtreamReqKV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamtreamReqKV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamtreamReqKV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamtreamReqKV& from) {
    StreamtreamReqKV::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamtreamReqKV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.StreamtreamReqKV";
  }
  protected:
  explicit StreamtreamReqKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamReqFieldNumber = 1,
  };
  // repeated .kv.ReqKV stream_req = 1;
  int stream_req_size() const;
  private:
  int _internal_stream_req_size() const;
  public:
  void clear_stream_req();
  ::kv::ReqKV* mutable_stream_req(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::ReqKV >*
      mutable_stream_req();
  private:
  const ::kv::ReqKV& _internal_stream_req(int index) const;
  ::kv::ReqKV* _internal_add_stream_req();
  public:
  const ::kv::ReqKV& stream_req(int index) const;
  ::kv::ReqKV* add_stream_req();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::ReqKV >&
      stream_req() const;

  // @@protoc_insertion_point(class_scope:kv.StreamtreamReqKV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::ReqKV > stream_req_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class StreamSetKVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.StreamSetKVResponse) */ {
 public:
  inline StreamSetKVResponse() : StreamSetKVResponse(nullptr) {}
  ~StreamSetKVResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamSetKVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamSetKVResponse(const StreamSetKVResponse& from);
  StreamSetKVResponse(StreamSetKVResponse&& from) noexcept
    : StreamSetKVResponse() {
    *this = ::std::move(from);
  }

  inline StreamSetKVResponse& operator=(const StreamSetKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamSetKVResponse& operator=(StreamSetKVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamSetKVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamSetKVResponse* internal_default_instance() {
    return reinterpret_cast<const StreamSetKVResponse*>(
               &_StreamSetKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamSetKVResponse& a, StreamSetKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamSetKVResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamSetKVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamSetKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamSetKVResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamSetKVResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamSetKVResponse& from) {
    StreamSetKVResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamSetKVResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.StreamSetKVResponse";
  }
  protected:
  explicit StreamSetKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamResFieldNumber = 1,
  };
  // repeated .kv.SetKVResponse stream_res = 1;
  int stream_res_size() const;
  private:
  int _internal_stream_res_size() const;
  public:
  void clear_stream_res();
  ::kv::SetKVResponse* mutable_stream_res(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::SetKVResponse >*
      mutable_stream_res();
  private:
  const ::kv::SetKVResponse& _internal_stream_res(int index) const;
  ::kv::SetKVResponse* _internal_add_stream_res();
  public:
  const ::kv::SetKVResponse& stream_res(int index) const;
  ::kv::SetKVResponse* add_stream_res();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::SetKVResponse >&
      stream_res() const;

  // @@protoc_insertion_point(class_scope:kv.StreamSetKVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::SetKVResponse > stream_res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvserver_2eproto;
};
// ===================================================================

class KVServer_Stub;

class KVServer : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KVServer() {};
 public:
  virtual ~KVServer();

  typedef KVServer_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SetKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqKV* request,
                       ::kv::SetKVResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqK* request,
                       ::kv::GetKResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqK* request,
                       ::kv::DelKVResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetExpire(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqExpire* request,
                       ::kv::SetExpireResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetKeyName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqKeyName* request,
                       ::kv::GetKeyNameResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetKVStream(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::StreamtreamReqKV* request,
                       ::kv::StreamSetKVResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVServer);
};

class KVServer_Stub : public KVServer {
 public:
  KVServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KVServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KVServer_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KVServer ------------------------------------------

  void SetKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqKV* request,
                       ::kv::SetKVResponse* response,
                       ::google::protobuf::Closure* done);
  void GetKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqK* request,
                       ::kv::GetKResponse* response,
                       ::google::protobuf::Closure* done);
  void DelKV(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqK* request,
                       ::kv::DelKVResponse* response,
                       ::google::protobuf::Closure* done);
  void SetExpire(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqExpire* request,
                       ::kv::SetExpireResponse* response,
                       ::google::protobuf::Closure* done);
  void GetKeyName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::ReqKeyName* request,
                       ::kv::GetKeyNameResponse* response,
                       ::google::protobuf::Closure* done);
  void SetKVStream(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::StreamtreamReqKV* request,
                       ::kv::StreamSetKVResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetKeyNameResponse

// repeated string val = 1;
inline int GetKeyNameResponse::_internal_val_size() const {
  return _impl_.val_.size();
}
inline int GetKeyNameResponse::val_size() const {
  return _internal_val_size();
}
inline void GetKeyNameResponse::clear_val() {
  _impl_.val_.Clear();
}
inline std::string* GetKeyNameResponse::add_val() {
  std::string* _s = _internal_add_val();
  // @@protoc_insertion_point(field_add_mutable:kv.GetKeyNameResponse.val)
  return _s;
}
inline const std::string& GetKeyNameResponse::_internal_val(int index) const {
  return _impl_.val_.Get(index);
}
inline const std::string& GetKeyNameResponse::val(int index) const {
  // @@protoc_insertion_point(field_get:kv.GetKeyNameResponse.val)
  return _internal_val(index);
}
inline std::string* GetKeyNameResponse::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:kv.GetKeyNameResponse.val)
  return _impl_.val_.Mutable(index);
}
inline void GetKeyNameResponse::set_val(int index, const std::string& value) {
  _impl_.val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::set_val(int index, std::string&& value) {
  _impl_.val_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::set_val(int index, const char* value, size_t size) {
  _impl_.val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kv.GetKeyNameResponse.val)
}
inline std::string* GetKeyNameResponse::_internal_add_val() {
  return _impl_.val_.Add();
}
inline void GetKeyNameResponse::add_val(const std::string& value) {
  _impl_.val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::add_val(std::string&& value) {
  _impl_.val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::add_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kv.GetKeyNameResponse.val)
}
inline void GetKeyNameResponse::add_val(const char* value, size_t size) {
  _impl_.val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kv.GetKeyNameResponse.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetKeyNameResponse::val() const {
  // @@protoc_insertion_point(field_list:kv.GetKeyNameResponse.val)
  return _impl_.val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetKeyNameResponse::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:kv.GetKeyNameResponse.val)
  return &_impl_.val_;
}

// -------------------------------------------------------------------

// ReqKeyName

// string keyRex = 1;
inline void ReqKeyName::clear_keyrex() {
  _impl_.keyrex_.ClearToEmpty();
}
inline const std::string& ReqKeyName::keyrex() const {
  // @@protoc_insertion_point(field_get:kv.ReqKeyName.keyRex)
  return _internal_keyrex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqKeyName::set_keyrex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyrex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqKeyName.keyRex)
}
inline std::string* ReqKeyName::mutable_keyrex() {
  std::string* _s = _internal_mutable_keyrex();
  // @@protoc_insertion_point(field_mutable:kv.ReqKeyName.keyRex)
  return _s;
}
inline const std::string& ReqKeyName::_internal_keyrex() const {
  return _impl_.keyrex_.Get();
}
inline void ReqKeyName::_internal_set_keyrex(const std::string& value) {
  
  _impl_.keyrex_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqKeyName::_internal_mutable_keyrex() {
  
  return _impl_.keyrex_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqKeyName::release_keyrex() {
  // @@protoc_insertion_point(field_release:kv.ReqKeyName.keyRex)
  return _impl_.keyrex_.Release();
}
inline void ReqKeyName::set_allocated_keyrex(std::string* keyrex) {
  if (keyrex != nullptr) {
    
  } else {
    
  }
  _impl_.keyrex_.SetAllocated(keyrex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyrex_.IsDefault()) {
    _impl_.keyrex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqKeyName.keyRex)
}

// -------------------------------------------------------------------

// SetExpireResponse

// bool flag = 1;
inline void SetExpireResponse::clear_flag() {
  _impl_.flag_ = false;
}
inline bool SetExpireResponse::_internal_flag() const {
  return _impl_.flag_;
}
inline bool SetExpireResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.SetExpireResponse.flag)
  return _internal_flag();
}
inline void SetExpireResponse::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void SetExpireResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.SetExpireResponse.flag)
}

// -------------------------------------------------------------------

// ReqExpire

// string key = 1;
inline void ReqExpire::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReqExpire::key() const {
  // @@protoc_insertion_point(field_get:kv.ReqExpire.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqExpire::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqExpire.key)
}
inline std::string* ReqExpire::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.ReqExpire.key)
  return _s;
}
inline const std::string& ReqExpire::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReqExpire::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqExpire::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqExpire::release_key() {
  // @@protoc_insertion_point(field_release:kv.ReqExpire.key)
  return _impl_.key_.Release();
}
inline void ReqExpire::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqExpire.key)
}

// uint64 expires = 2;
inline void ReqExpire::clear_expires() {
  _impl_.expires_ = uint64_t{0u};
}
inline uint64_t ReqExpire::_internal_expires() const {
  return _impl_.expires_;
}
inline uint64_t ReqExpire::expires() const {
  // @@protoc_insertion_point(field_get:kv.ReqExpire.expires)
  return _internal_expires();
}
inline void ReqExpire::_internal_set_expires(uint64_t value) {
  
  _impl_.expires_ = value;
}
inline void ReqExpire::set_expires(uint64_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:kv.ReqExpire.expires)
}

// -------------------------------------------------------------------

// ReqKV

// uint32 encoding = 1;
inline void ReqKV::clear_encoding() {
  _impl_.encoding_ = 0u;
}
inline uint32_t ReqKV::_internal_encoding() const {
  return _impl_.encoding_;
}
inline uint32_t ReqKV::encoding() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.encoding)
  return _internal_encoding();
}
inline void ReqKV::_internal_set_encoding(uint32_t value) {
  
  _impl_.encoding_ = value;
}
inline void ReqKV::set_encoding(uint32_t value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:kv.ReqKV.encoding)
}

// string key = 2;
inline void ReqKV::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReqKV::key() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqKV::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqKV.key)
}
inline std::string* ReqKV::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.ReqKV.key)
  return _s;
}
inline const std::string& ReqKV::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReqKV::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqKV::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqKV::release_key() {
  // @@protoc_insertion_point(field_release:kv.ReqKV.key)
  return _impl_.key_.Release();
}
inline void ReqKV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqKV.key)
}

// string val = 3;
inline void ReqKV::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& ReqKV::val() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqKV::set_val(ArgT0&& arg0, ArgT... args) {
 
 _impl_.val_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqKV.val)
}
inline std::string* ReqKV::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:kv.ReqKV.val)
  return _s;
}
inline const std::string& ReqKV::_internal_val() const {
  return _impl_.val_.Get();
}
inline void ReqKV::_internal_set_val(const std::string& value) {
  
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqKV::_internal_mutable_val() {
  
  return _impl_.val_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqKV::release_val() {
  // @@protoc_insertion_point(field_release:kv.ReqKV.val)
  return _impl_.val_.Release();
}
inline void ReqKV::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  _impl_.val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_.IsDefault()) {
    _impl_.val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqKV.val)
}

// -------------------------------------------------------------------

// SetKVResponse

// bool flag = 1;
inline void SetKVResponse::clear_flag() {
  _impl_.flag_ = false;
}
inline bool SetKVResponse::_internal_flag() const {
  return _impl_.flag_;
}
inline bool SetKVResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.SetKVResponse.flag)
  return _internal_flag();
}
inline void SetKVResponse::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void SetKVResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.SetKVResponse.flag)
}

// -------------------------------------------------------------------

// DelKVResponse

// bool flag = 1;
inline void DelKVResponse::clear_flag() {
  _impl_.flag_ = false;
}
inline bool DelKVResponse::_internal_flag() const {
  return _impl_.flag_;
}
inline bool DelKVResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.DelKVResponse.flag)
  return _internal_flag();
}
inline void DelKVResponse::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void DelKVResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.DelKVResponse.flag)
}

// -------------------------------------------------------------------

// ReqK

// string key = 1;
inline void ReqK::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReqK::key() const {
  // @@protoc_insertion_point(field_get:kv.ReqK.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqK::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqK.key)
}
inline std::string* ReqK::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.ReqK.key)
  return _s;
}
inline const std::string& ReqK::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReqK::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqK::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqK::release_key() {
  // @@protoc_insertion_point(field_release:kv.ReqK.key)
  return _impl_.key_.Release();
}
inline void ReqK::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqK.key)
}

// -------------------------------------------------------------------

// GetKResponse

// bool flag = 1;
inline void GetKResponse::clear_flag() {
  _impl_.flag_ = false;
}
inline bool GetKResponse::_internal_flag() const {
  return _impl_.flag_;
}
inline bool GetKResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.GetKResponse.flag)
  return _internal_flag();
}
inline void GetKResponse::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void GetKResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.GetKResponse.flag)
}

// repeated string val = 2;
inline int GetKResponse::_internal_val_size() const {
  return _impl_.val_.size();
}
inline int GetKResponse::val_size() const {
  return _internal_val_size();
}
inline void GetKResponse::clear_val() {
  _impl_.val_.Clear();
}
inline std::string* GetKResponse::add_val() {
  std::string* _s = _internal_add_val();
  // @@protoc_insertion_point(field_add_mutable:kv.GetKResponse.val)
  return _s;
}
inline const std::string& GetKResponse::_internal_val(int index) const {
  return _impl_.val_.Get(index);
}
inline const std::string& GetKResponse::val(int index) const {
  // @@protoc_insertion_point(field_get:kv.GetKResponse.val)
  return _internal_val(index);
}
inline std::string* GetKResponse::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:kv.GetKResponse.val)
  return _impl_.val_.Mutable(index);
}
inline void GetKResponse::set_val(int index, const std::string& value) {
  _impl_.val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, std::string&& value) {
  _impl_.val_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, const char* value, size_t size) {
  _impl_.val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kv.GetKResponse.val)
}
inline std::string* GetKResponse::_internal_add_val() {
  return _impl_.val_.Add();
}
inline void GetKResponse::add_val(const std::string& value) {
  _impl_.val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(std::string&& value) {
  _impl_.val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(const char* value, size_t size) {
  _impl_.val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kv.GetKResponse.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetKResponse::val() const {
  // @@protoc_insertion_point(field_list:kv.GetKResponse.val)
  return _impl_.val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetKResponse::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:kv.GetKResponse.val)
  return &_impl_.val_;
}

// -------------------------------------------------------------------

// StreamtreamReqKV

// repeated .kv.ReqKV stream_req = 1;
inline int StreamtreamReqKV::_internal_stream_req_size() const {
  return _impl_.stream_req_.size();
}
inline int StreamtreamReqKV::stream_req_size() const {
  return _internal_stream_req_size();
}
inline void StreamtreamReqKV::clear_stream_req() {
  _impl_.stream_req_.Clear();
}
inline ::kv::ReqKV* StreamtreamReqKV::mutable_stream_req(int index) {
  // @@protoc_insertion_point(field_mutable:kv.StreamtreamReqKV.stream_req)
  return _impl_.stream_req_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::ReqKV >*
StreamtreamReqKV::mutable_stream_req() {
  // @@protoc_insertion_point(field_mutable_list:kv.StreamtreamReqKV.stream_req)
  return &_impl_.stream_req_;
}
inline const ::kv::ReqKV& StreamtreamReqKV::_internal_stream_req(int index) const {
  return _impl_.stream_req_.Get(index);
}
inline const ::kv::ReqKV& StreamtreamReqKV::stream_req(int index) const {
  // @@protoc_insertion_point(field_get:kv.StreamtreamReqKV.stream_req)
  return _internal_stream_req(index);
}
inline ::kv::ReqKV* StreamtreamReqKV::_internal_add_stream_req() {
  return _impl_.stream_req_.Add();
}
inline ::kv::ReqKV* StreamtreamReqKV::add_stream_req() {
  ::kv::ReqKV* _add = _internal_add_stream_req();
  // @@protoc_insertion_point(field_add:kv.StreamtreamReqKV.stream_req)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::ReqKV >&
StreamtreamReqKV::stream_req() const {
  // @@protoc_insertion_point(field_list:kv.StreamtreamReqKV.stream_req)
  return _impl_.stream_req_;
}

// -------------------------------------------------------------------

// StreamSetKVResponse

// repeated .kv.SetKVResponse stream_res = 1;
inline int StreamSetKVResponse::_internal_stream_res_size() const {
  return _impl_.stream_res_.size();
}
inline int StreamSetKVResponse::stream_res_size() const {
  return _internal_stream_res_size();
}
inline void StreamSetKVResponse::clear_stream_res() {
  _impl_.stream_res_.Clear();
}
inline ::kv::SetKVResponse* StreamSetKVResponse::mutable_stream_res(int index) {
  // @@protoc_insertion_point(field_mutable:kv.StreamSetKVResponse.stream_res)
  return _impl_.stream_res_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::SetKVResponse >*
StreamSetKVResponse::mutable_stream_res() {
  // @@protoc_insertion_point(field_mutable_list:kv.StreamSetKVResponse.stream_res)
  return &_impl_.stream_res_;
}
inline const ::kv::SetKVResponse& StreamSetKVResponse::_internal_stream_res(int index) const {
  return _impl_.stream_res_.Get(index);
}
inline const ::kv::SetKVResponse& StreamSetKVResponse::stream_res(int index) const {
  // @@protoc_insertion_point(field_get:kv.StreamSetKVResponse.stream_res)
  return _internal_stream_res(index);
}
inline ::kv::SetKVResponse* StreamSetKVResponse::_internal_add_stream_res() {
  return _impl_.stream_res_.Add();
}
inline ::kv::SetKVResponse* StreamSetKVResponse::add_stream_res() {
  ::kv::SetKVResponse* _add = _internal_add_stream_res();
  // @@protoc_insertion_point(field_add:kv.StreamSetKVResponse.stream_res)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kv::SetKVResponse >&
StreamSetKVResponse::stream_res() const {
  // @@protoc_insertion_point(field_list:kv.StreamSetKVResponse.stream_res)
  return _impl_.stream_res_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
